############ A1
#include <tf2_geometry_msgs/tf2_geometry_msgs.h>
tf2::Quaternion quat_tf;
geometry_msgs::Quaternion quat_msg = ...;
 
tf2::convert(quat_msg , quat_tf);
// or
tf2::fromMsg(quat_msg, quat_tf);

############ A2
// or for the other conversion direction
quat_msg = tf2::toMsg(quat_tf);


########### A3

ROS_INFO_STREAM("x: " << myQuaternion.getX() << " y: " << myQuaternion.getY() << 
                " z: " << myQuaternion.getZ() << " w: " << myQuaternion.getW());
                
 ########### B1               
 tf2::Matrix3x3::setRotation	(	const Quaternion & 	q	)
 tf2::Quaternion q(
        msg->pose.pose.orientation.x,
        msg->pose.pose.orientation.y,
        msg->pose.pose.orientation.z,
        msg->pose.pose.orientation.w);
    tf2::Matrix3x3 m(q);
    double roll, pitch, yaw;
    m.getRPY(roll, pitch, yaw);
    
 ########## B2
 #include <tf2/convert.h>
#include <Eigen/Geometry>
#include <geometry_msgs/QuaternionStamped.h>
#include <geometry_msgs/PointStamped.h>
#include <geometry_msgs/PoseStamped.h>

 geometry_msgs::Quaternion quat_msg
 #Converts a Quaternion message into an Eigen Quaternion.
 tf2::quaternionMsgToEigen (const geometry_msgs::Quaternion &m, Eigen::Quaterniond &e);
 Eigen::fromMsg (const geometry_msgs::Quaternion &msg, Eigen::Quaterniond &out)
 Eigen::outputAsMatrix(q);

 	
